ðŸ§  AI Brain Console started. Type anything to begin.
> Running ExUnit with seed: 576276, max_cases: 12

.....

  1) test word_to_id is deterministic (ElixirAiCore.TokenizerTest)
     test/elixir_ai_core/tokenizer_test.exs:5
     ** (UndefinedFunctionError) function ElixirAiCore.Tokenizer.word_to_id/1 is undefined (module ElixirAiCore.Tokenizer is not available)
     code: assert Tokenizer.word_to_id("abc") == Tokenizer.word_to_id("abc")
     stacktrace:
       ElixirAiCore.Tokenizer.word_to_id("abc")
       test/elixir_ai_core/tokenizer_test.exs:6: (test)



  2) test embed returns a float between 0 and 1 (ElixirAiCore.TokenizerTest)
     test/elixir_ai_core/tokenizer_test.exs:13
     ** (UndefinedFunctionError) function ElixirAiCore.Tokenizer.embed/1 is undefined (module ElixirAiCore.Tokenizer is not available)
     code: embedded = Tokenizer.embed("test")
     stacktrace:
       ElixirAiCore.Tokenizer.embed("test")
       test/elixir_ai_core/tokenizer_test.exs:14: (test)

...
22:53:42.839 [error] GenServer ElixirAiCore.ModelServer terminating
** (UndefinedFunctionError) function ElixirAiCore.Core.infer/2 is undefined (module ElixirAiCore.Core is not available)
    ElixirAiCore.Core.infer(&ElixirAiCore.Core.dummy_model/1, %{input: "Hello"})
    (elixir_ai_core 0.1.0) lib/elixir_ai_core/model_server.ex:35: ElixirAiCore.ModelServer.handle_call/3
    (stdlib 7.0.1) gen_server.erl:2470: :gen_server.try_handle_call/4
    (stdlib 7.0.1) gen_server.erl:2499: :gen_server.handle_msg/3
    (stdlib 7.0.1) proc_lib.erl:333: :proc_lib.init_p_do_apply/3
Last message (from #PID<0.412.0>): {:infer, %{input: "Hello"}}


  3) test different words produce different ids (ElixirAiCore.TokenizerTest)
     test/elixir_ai_core/tokenizer_test.exs:9
     ** (UndefinedFunctionError) function ElixirAiCore.Tokenizer.word_to_id/1 is undefined (module ElixirAiCore.Tokenizer is not available)
     code: refute Tokenizer.word_to_id("abc") == Tokenizer.word_to_id("bac")
     stacktrace:
       ElixirAiCore.Tokenizer.word_to_id("abc")
       test/elixir_ai_core/tokenizer_test.exs:10: (test)

.....

  4) test inference returns model output when model is loaded (ElixirAiCore.ModelServerTest)
     test/elixir_ai_core/model_server_test.exs:20
     ** (EXIT from #PID<0.412.0>) an exception was raised:
         ** (UndefinedFunctionError) function ElixirAiCore.Core.infer/2 is undefined (module ElixirAiCore.Core is not available)
             ElixirAiCore.Core.infer(&ElixirAiCore.Core.dummy_model/1, %{input: "Hello"})
             (elixir_ai_core 0.1.0) lib/elixir_ai_core/model_server.ex:35: ElixirAiCore.ModelServer.handle_call/3
             (stdlib 7.0.1) gen_server.erl:2470: :gen_server.try_handle_call/4
             (stdlib 7.0.1) gen_server.erl:2499: :gen_server.handle_msg/3
             (stdlib 7.0.1) proc_lib.erl:333: :proc_lib.init_p_do_apply/3

.........

  5) test Brain.get/1 handles dead registry pid gracefully (BrainRegistryTest)
     test/brainregistry_test.exs:13
     ** (UndefinedFunctionError) function Core.DB.clear/0 is undefined or private
     stacktrace:
       (elixir_ai_core 0.1.0) Core.DB.clear()
       test/brainregistry_test.exs:9: BrainRegistryTest.__ex_unit_setup_0/1
       test/brainregistry_test.exs:1: BrainRegistryTest.__ex_unit__/2



  6) test Process user input basic structure works with known words (SemanticsTest)
     test/semantics_test.exs:8
     Assertion with == failed
     code:  assert tokens == [%{pos: [:unknown], word: "hello"}, %{pos: [:unknown], word: "world"}]
     left:  [
              %{
                pos: ["noun",
                 "verb",
                 "interjection",
                 "interjection",
                 "interjection",
                 "interjection",
                 "interjection"],
                word: "hello"
              },
              %{
                pos: ["noun",
                 "noun", "noun",
                 "noun", "noun",
                 "noun", "noun",
                 "noun", "noun",
                 "noun", "noun",
                 "noun", "verb",
                 "verb"],
                word: "world"
              }
            ]
     right: [
              %{
                pos: [:unknown],
                word: "hello"
              },
              %{
                pos: [:unknown],
                word: "world"
              }
            ]
     stacktrace:
       test/semantics_test.exs:12: (test)



  7) test enrich returns brain cells for a common English word (LexiconEnricherIntegrationTest)
     test/scraper_test.exs:7
     ** (Ecto.ConstraintError) constraint error when attempting to insert struct:

         * "brain_cells_pkey" (unique_constraint)

     If you would like to stop this constraint violation from raising an
     exception and instead add it as an error to your changeset, please
     call `unique_constraint/3` on your changeset with the constraint
     `:name` as an option.

     The changeset has not defined any constraint.

     code: result = LexiconEnricher.enrich(word)
     stacktrace:
       (ecto 3.13.2) lib/ecto/repo/schema.ex:1052: anonymous fn/4 in Ecto.Repo.Schema.constraints_to_errors/3
       (elixir 1.18.4) lib/enum.ex:1714: Enum."-map/2-lists^map/1-1-"/2
       (ecto 3.13.2) lib/ecto/repo/schema.ex:1035: Ecto.Repo.Schema.constraints_to_errors/3
       (ecto 3.13.2) lib/ecto/repo/schema.ex:1005: Ecto.Repo.Schema.apply/4
       (ecto 3.13.2) lib/ecto/repo/schema.ex:500: anonymous fn/15 in Ecto.Repo.Schema.do_insert/4
       (elixir_ai_core 0.1.0) lib/lexicon_enricher.ex:28: LexiconEnricher.insert_cell/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/lexicon_enricher.ex:18: LexiconEnricher.enrich/1
       test/scraper_test.exs:10: (test)

.

  8) test Tokenizer.tokenize/1 uses DB if word is already enriched (TokenizerTest)
     test/tokenizer_test.exs:14
     ** (UndefinedFunctionError) function Core.DB.clear/0 is undefined or private
     stacktrace:
       (elixir_ai_core 0.1.0) Core.DB.clear()
       test/tokenizer_test.exs:10: TokenizerTest.__ex_unit_setup_0_0/1
       TokenizerTest.__ex_unit_describe_0/1



  9) test Tokenizer.tokenize/1 returns [:unknown] if enrichment fails (TokenizerTest)
     test/tokenizer_test.exs:34
     ** (UndefinedFunctionError) function Core.DB.clear/0 is undefined or private
     stacktrace:
       (elixir_ai_core 0.1.0) Core.DB.clear()
       test/tokenizer_test.exs:10: TokenizerTest.__ex_unit_setup_0_0/1
       TokenizerTest.__ex_unit_describe_0/1



 10) test Tokenizer.tokenize/1 enriches missing word and re-uses from DB (TokenizerTest)
     test/tokenizer_test.exs:21
     ** (UndefinedFunctionError) function Core.DB.clear/0 is undefined or private
     stacktrace:
       (elixir_ai_core 0.1.0) Core.DB.clear()
       test/tokenizer_test.exs:10: TokenizerTest.__ex_unit_setup_0_0/1
       TokenizerTest.__ex_unit_describe_0/1



 11) test applying meth overstimulates most cells (BrainCell.SubstanceEffectTest)
     test/brain/substance_effect_test.exs:19
     Expected truthy, got false
     code: assert Enum.all?(updated, fn c -> c.status == :overstimulated end)
     arguments:

         # 1
         [
           %BrainCell{
             __meta__: #Ecto.Schema.Metadata<:built, "brain_cells">,
             id: :a,
             word: nil,
             pos: nil,
             definition: nil,
             example: nil,
             examples: [],
             synonyms: [],
             antonyms: [],
             type: nil,
             function: nil,
             activation: 0.0,
             serotonin: 0.0,
             dopamine: 1.8,
             connections: [],
             position: [0.0, 0.0,
              0.0],
             status: "suppressed",
             last_dose_at: nil,
             last_substance: nil,
             inserted_at: nil,
             updated_at: nil
           },
           %BrainCell{
             __meta__: #Ecto.Schema.Metadata<:built, "brain_cells">,
             id: :b,
             word: nil,
             pos: nil,
             definition: nil,
             example: nil,
             examples: [],
             synonyms: [],
             antonyms: [],
             type: nil,
             function: nil,
             activation: 0.0,
             serotonin: 0.0,
             dopamine: 1.8,
             connections: [],
             position: [0.0, 0.0,
              0.0],
             status: "suppressed",
             last_dose_at: nil,
             last_substance: nil,
             inserted_at: nil,
             updated_at: nil
           },
           %BrainCell{
             __meta__: #Ecto.Schema.Metadata<:built, "brain_cells">,
             id: :c,
             word: nil,
             pos: nil,
             definition: nil,
             example: nil,
             examples: [],
             synonyms: [],
             antonyms: [],
             type: nil,
             function: nil,
             activation: 0.0,
             serotonin: 0.0,
             dopamine: 1.8,
             connections: [],
             position: [0.0, 0.0,
              0.0],
             status: "suppressed",
             last_dose_at: nil,
             last_substance: nil,
             inserted_at: nil,
             updated_at: nil
           }
         ]

         # 2
         #Function<1.31471338/1 in BrainCell.SubstanceEffectTest."test applying meth overstimulates most cells"/1>

     stacktrace:
       test/brain/substance_effect_test.exs:21: (test)



 12) test cannabis mildly enhances mood (BrainCell.SubstanceEffectTest)
     test/brain/substance_effect_test.exs:29
     Expected truthy, got false
     code: assert Enum.all?(updated, fn c -> c.serotonin > 1.0 end)
     arguments:

         # 1
         [
           %BrainCell{
             __meta__: #Ecto.Schema.Metadata<:built, "brain_cells">,
             id: :a,
             word: nil,
             pos: nil,
             definition: nil,
             example: nil,
             examples: [],
             synonyms: [],
             antonyms: [],
             type: nil,
             function: nil,
             activation: 0.0,
             serotonin: 0.3,
             dopamine: 0.5,
             connections: [],
             position: [0.0, 0.0,
              0.0],
             status: "suppressed",
             last_dose_at: nil,
             last_substance: nil,
             inserted_at: nil,
             updated_at: nil
           },
           %BrainCell{
             __meta__: #Ecto.Schema.Metadata<:built, "brain_cells">,
             id: :b,
             word: nil,
             pos: nil,
             definition: nil,
             example: nil,
             examples: [],
             synonyms: [],
             antonyms: [],
             type: nil,
             function: nil,
             activation: 0.0,
             serotonin: 0.3,
             dopamine: 0.5,
             connections: [],
             position: [0.0, 0.0,
              0.0],
             status: "suppressed",
             last_dose_at: nil,
             last_substance: nil,
             inserted_at: nil,
             updated_at: nil
           },
           %BrainCell{
             __meta__: #Ecto.Schema.Metadata<:built, "brain_cells">,
             id: :c,
             word: nil,
             pos: nil,
             definition: nil,
             example: nil,
             examples: [],
             synonyms: [],
             antonyms: [],
             type: nil,
             function: nil,
             activation: 0.0,
             serotonin: 0.3,
             dopamine: 0.5,
             connections: [],
             position: [0.0, 0.0,
              0.0],
             status: "suppressed",
             last_dose_at: nil,
             last_substance: nil,
             inserted_at: nil,
             updated_at: nil
           }
         ]

         # 2
         #Function<2.31471338/1 in BrainCell.SubstanceEffectTest."test cannabis mildly enhances mood"/1>

     stacktrace:
       test/brain/substance_effect_test.exs:31: (test)



 13) test applying alcohol suppresses cells (BrainCell.SubstanceEffectTest)
     test/brain/substance_effect_test.exs:24
     Expected truthy, got false
     code: assert Enum.all?(updated, fn c -> c.status in [:suppressed, :inactive] end)
     arguments:

         # 1
         [
           %BrainCell{
             __meta__: #Ecto.Schema.Metadata<:built, "brain_cells">,
             id: :a,
             word: nil,
             pos: nil,
             definition: nil,
             example: nil,
             examples: [],
             synonyms: [],
             antonyms: [],
             type: nil,
             function: nil,
             activation: 0.0,
             serotonin: 0.0,
             dopamine: 0.2,
             connections: [],
             position: [0.0, 0.0,
              0.0],
             status: "suppressed",
             last_dose_at: nil,
             last_substance: nil,
             inserted_at: nil,
             updated_at: nil
           },
           %BrainCell{
             __meta__: #Ecto.Schema.Metadata<:built, "brain_cells">,
             id: :b,
             word: nil,
             pos: nil,
             definition: nil,
             example: nil,
             examples: [],
             synonyms: [],
             antonyms: [],
             type: nil,
             function: nil,
             activation: 0.0,
             serotonin: 0.0,
             dopamine: 0.2,
             connections: [],
             position: [0.0, 0.0,
              0.0],
             status: "suppressed",
             last_dose_at: nil,
             last_substance: nil,
             inserted_at: nil,
             updated_at: nil
           },
           %BrainCell{
             __meta__: #Ecto.Schema.Metadata<:built, "brain_cells">,
             id: :c,
             word: nil,
             pos: nil,
             definition: nil,
             example: nil,
             examples: [],
             synonyms: [],
             antonyms: [],
             type: nil,
             function: nil,
             activation: 0.0,
             serotonin: 0.0,
             dopamine: 0.2,
             connections: [],
             position: [0.0, 0.0,
              0.0],
             status: "suppressed",
             last_dose_at: nil,
             last_substance: nil,
             inserted_at: nil,
             updated_at: nil
           }
         ]

         # 2
         #Function<0.31471338/1 in BrainCell.SubstanceEffectTest."test applying alcohol suppresses cells"/1>

     stacktrace:
       test/brain/substance_effect_test.exs:26: (test)



 14) test withdrawal triggers after substance delay (BrainCell.SubstanceEffectTest)
     test/brain/substance_effect_test.exs:34
     Assertion with == failed
     code:  assert dosed.status == :suppressed
     left:  "suppressed"
     right: :suppressed
     stacktrace:
       test/brain/substance_effect_test.exs:44: (test)



 15) test teaches and recalls a simple sentence chain (ElixirAiCore.BrainTrainerTest)
     test/elixir_ai_core/brain_trainer_test.exs:17
     ** (UndefinedFunctionError) function ElixirAiCore.Supervisor.start_braincell/2 is undefined or private. Did you mean:

           * start_link/1

     code: assert :ok = BrainTrainer.teach_chain(@phrase)
     stacktrace:
       (elixir_ai_core 0.1.0) ElixirAiCore.Supervisor.start_braincell("hey", :word)
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/brain_trainer.ex:10: anonymous fn/1 in ElixirAiCore.BrainTrainer.teach_chain/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/brain_trainer.ex:8: ElixirAiCore.BrainTrainer.teach_chain/1
       test/elixir_ai_core/brain_trainer_test.exs:19: (test)



 16) test get/2 returns a cell by id (Core.DBTest)
     test/core/db_test.exs:19
     ** (RuntimeError) failed to start child with the spec Core.DB.
     Reason: bad child specification, got: {:already_started, #PID<0.264.0>}
     stacktrace:
       (ex_unit 1.18.4) lib/ex_unit/callbacks.ex:590: ExUnit.Callbacks.start_supervised!/2
       test/core/db_test.exs:7: Core.DBTest.__ex_unit_setup_0/1
       test/core/db_test.exs:1: Core.DBTest.__ex_unit__/2



 17) test get/1 defaults to word mode (Core.DBTest)
     test/core/db_test.exs:30
     ** (RuntimeError) failed to start child with the spec Core.DB.
     Reason: bad child specification, got: {:already_started, #PID<0.264.0>}
     stacktrace:
       (ex_unit 1.18.4) lib/ex_unit/callbacks.ex:590: ExUnit.Callbacks.start_supervised!/2
       test/core/db_test.exs:7: Core.DBTest.__ex_unit_setup_0/1
       test/core/db_test.exs:1: Core.DBTest.__ex_unit__/2



 18) test get/2 returns list of cells by word (Core.DBTest)
     test/core/db_test.exs:23
     ** (RuntimeError) failed to start child with the spec Core.DB.
     Reason: bad child specification, got: {:already_started, #PID<0.264.0>}
     stacktrace:
       (ex_unit 1.18.4) lib/ex_unit/callbacks.ex:590: ExUnit.Callbacks.start_supervised!/2
       test/core/db_test.exs:7: Core.DBTest.__ex_unit_setup_0/1
       test/core/db_test.exs:1: Core.DBTest.__ex_unit__/2



 19) test intent_from_word_pos_list/1 recognizes greeting from pattern (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:6
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :greeting
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("Hello", :interjection)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:8: (test)



 20) test intent_from_word_pos_list/1 recognizes question pattern (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:16
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :question
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("What", :wh_pronoun)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:18: (test)



 21) test intent_from_word_pos_list/1 returns :unknown for unmatched input (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:69
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :unknown
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("Blue", :adjective)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:75: (test)



 22) test intent_from_word_pos_list/1 recognizes exclamation pattern (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:26
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :exclamation
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("Wow", :interjection)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:28: (test)



 23) test intent_from_word_pos_list/1 recognizes negation pattern (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:31
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :negation
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("I", :pronoun)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:38: (test)



 24) test intent_from_word_pos_list/1 recognizes greeting from fallback word (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:11
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :greeting
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("Hi", :unknown)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:13: (test)



 25) test intent_from_word_pos_list/1 recognizes request pattern (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:41
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :request
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("Could", :modal)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:47: (test)



 26) test intent_from_word_pos_list/1 recognizes affirmation from fallback word (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:55
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :affirmation
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("Yeah", :unknown)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:57: (test)



 27) test intent_from_word_pos_list/1 recognizes affirmation from pattern (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:50
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :affirmation
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("Yes", :affirmative)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:52: (test)



 28) test intent_from_word_pos_list/1 recognizes statement from pattern (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:60
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :statement
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("The", :determiner)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:66: (test)



 29) test intent_from_word_pos_list/1 recognizes command pattern (ElixirAiCore.SentenceIntentTest)
     test/elixir_ai_core/sentence_intent_test.exs:21
     ** (UndefinedFunctionError) function ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available)
     code: assert SentenceIntent.intent_from_word_pos_list(pos_list) == :command
     stacktrace:
       ElixirAiCore.Schemas.BrainCell.Schema.build_id("Go", :verb)
       (elixir_ai_core 0.1.0) lib/brain.ex:38: anonymous fn/1 in Brain.maybe_fire_cells/1
       (elixir 1.18.4) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (elixir_ai_core 0.1.0) lib/elixir_ai_core/sentence_intent.ex:92: SentenceIntent.intent_from_word_pos_list/1
       test/elixir_ai_core/sentence_intent_test.exs:23: (test)



 30) test get/2 returns a cell by id (Core.DBTest)
     test/core/db_test.exs:19
     ** (RuntimeError) failed to start child with the spec Core.DB.
     Reason: bad child specification, got: {:already_started, #PID<0.264.0>}
     stacktrace:
       (ex_unit 1.18.4) lib/ex_unit/callbacks.ex:590: ExUnit.Callbacks.start_supervised!/2
       test/core/db_test.exs:7: Core.DBTest.__ex_unit_setup_0/1
       test/core/db_test.exs:1: Core.DBTest.__ex_unit__/2



 31) test get/1 defaults to word mode (Core.DBTest)
     test/core/db_test.exs:30
     ** (RuntimeError) failed to start child with the spec Core.DB.
     Reason: bad child specification, got: {:already_started, #PID<0.264.0>}
     stacktrace:
       (ex_unit 1.18.4) lib/ex_unit/callbacks.ex:590: ExUnit.Callbacks.start_supervised!/2
       test/core/db_test.exs:7: Core.DBTest.__ex_unit_setup_0/1
       test/core/db_test.exs:1: Core.DBTest.__ex_unit__/2



 32) test get/2 returns list of cells by word (Core.DBTest)
     test/core/db_test.exs:23
     ** (RuntimeError) failed to start child with the spec Core.DB.
     Reason: bad child specification, got: {:already_started, #PID<0.264.0>}
     stacktrace:
       (ex_unit 1.18.4) lib/ex_unit/callbacks.ex:590: ExUnit.Callbacks.start_supervised!/2
       test/core/db_test.exs:7: Core.DBTest.__ex_unit_setup_0/1
       test/core/db_test.exs:1: Core.DBTest.__ex_unit__/2


Finished in 1.2 seconds (0.9s async, 0.2s sync)
55 tests, 32 failures
