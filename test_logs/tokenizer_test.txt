    warning: function do_fire/5 is unused
    â”‚
 41 â”‚   defp do_fire(%BrainCell{id: id, connections: connections}, strength, depth, visited, trail) do
    â”‚        ~
    â”‚
    â””â”€ lib/brainsim.ex:41:8: BrainSim (module)

    warning: variable "id" is unused (if the variable is not meant to be used, prefix it with an underscore)
    â”‚
 54 â”‚   def init(%{id: id} = args) do
    â”‚                  ~~
    â”‚
    â””â”€ lib/braincell.ex:54:18: BrainCell.init/1

    warning: Brain.put/1 is undefined or private
    â”‚
 67 â”‚     Brain.put(updated)
    â”‚           ~
    â”‚
    â””â”€ lib/braincell.ex:67:11: BrainCell.handle_cast/2

    warning: Brain.put/1 is undefined or private
    â”‚
 72 â”‚     Brain.put(state)
    â”‚           ~
    â”‚
    â””â”€ lib/braincell.ex:72:11: BrainCell.handle_cast/2

    warning: Brain.all_ids/1 is undefined or private
    â”‚
 34 â”‚     Brain.all_ids(Brain)
    â”‚           ~
    â”‚
    â””â”€ lib/elixir_ai_core/brain_output.ex:34:11: BrainOutput.top_fired_cell_id/0

    warning: Brain.all_ids/1 is undefined or private
    â”‚
 46 â”‚     Brain.all_ids(Brain)
    â”‚           ~
    â”‚
    â””â”€ lib/elixir_ai_core/brain_output.ex:46:11: BrainOutput.reset_activations/0

    warning: Brain.get/2 is undefined or private. Did you mean:

          * get/1

    â”‚
 48 â”‚       case Brain.get(Brain, id) do
    â”‚                  ~
    â”‚
    â””â”€ lib/elixir_ai_core/brain_output.ex:48:18: BrainOutput.reset_activations/0

    warning: Brain.put/1 is undefined or private
    â”‚
 50 â”‚           Brain.put(%{cell | activation: 0.0})
    â”‚                 ~
    â”‚
    â””â”€ lib/elixir_ai_core/brain_output.ex:50:17: BrainOutput.reset_activations/0

    warning: variable "brain_state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    â”‚
 12 â”‚   defp detect_novelty(context, brain_state) do
    â”‚                                ~~~~~~~~~~~
    â”‚
    â””â”€ lib/curiosity_core.ex:12:32: CuriosityCore.detect_novelty/2

    warning: Brain.known_concept?/1 is undefined or private
    â”‚
 15 â”‚       not Brain.known_concept?(token.word)
    â”‚                 ~
    â”‚
    â””â”€ lib/curiosity_core.ex:15:17: CuriosityCore.detect_novelty/2

    warning: variable "brain" is unused (if the variable is not meant to be used, prefix it with an underscore)
    â”‚
  5 â”‚   def tag_verbs(tokens, brain) do
    â”‚                         ~~~~~
    â”‚
    â””â”€ lib/verb_identifier.ex:5:25: VerbIdentifier.tag_verbs/2

    warning: variable "context_tokens" is unused (if the variable is not meant to be used, prefix it with an underscore)
    â”‚
 15 â”‚   defp apply_heuristics(token, context_tokens) do
    â”‚                                ~~~~~~~~~~~~~~
    â”‚
    â””â”€ lib/verb_identifier.ex:15:32: VerbIdentifier.apply_heuristics/2

    warning: Brain.lookup_pos/1 is undefined or private
    â”‚
  8 â”‚       case Brain.lookup_pos(token.word) do
    â”‚                  ~
    â”‚
    â””â”€ lib/verb_identifier.ex:8:18: VerbIdentifier.tag_verbs/2

    warning: ElixirAiCore.Supervisor.start_braincell/2 is undefined or private. Did you mean:

          * start_link/1

    â”‚
 10 â”‚       ElixirAiCore.Supervisor.start_braincell(from, :word)
    â”‚                               ~
    â”‚
    â””â”€ lib/elixir_ai_core/brain_trainer.ex:10:31: ElixirAiCore.BrainTrainer.teach_chain/1

    warning: ElixirAiCore.Supervisor.start_braincell/2 is undefined or private. Did you mean:

          * start_link/1

    â”‚
 11 â”‚       ElixirAiCore.Supervisor.start_braincell(to, :word)
    â”‚                               ~
    â”‚
    â””â”€ lib/elixir_ai_core/brain_trainer.ex:11:31: ElixirAiCore.BrainTrainer.teach_chain/1

    warning: LLM.generate_code/1 is undefined (module LLM is not available or is yet to be defined). Make sure the module name is correct and has been specified in full (or that an alias has been defined)
    â”‚
  4 â”‚     {:ok, code} = LLM.generate_code(prompt)
    â”‚                       ~
    â”‚
    â””â”€ lib/self_coder.ex:4:23: SelfCoder.write_function/1

    warning: UUID.uuid4/0 is undefined (module UUID is not available or is yet to be defined). Make sure the module name is correct and has been specified in full (or that an alias has been defined)
    â”‚
  5 â”‚     File.write!("lib/brain/self_learned/#{UUID.uuid4()}.ex", code)
    â”‚                                                ~
    â”‚
    â””â”€ lib/self_coder.ex:5:48: SelfCoder.write_function/1

    warning: ElixirAiCore.Core.clamp/3 is undefined (module ElixirAiCore.Core is not available or is yet to be defined)
    â”‚
 41 â”‚     new_ser = Core.clamp(cell.serotonin + deltas.serotonin, 0.0, 2.0)
    â”‚                    ~
    â”‚
    â””â”€ lib/withdrawl.ex:41:20: BrainCell.Withdrawal.apply_withdrawal_effect/2

    warning: ElixirAiCore.Core.clamp/3 is undefined (module ElixirAiCore.Core is not available or is yet to be defined)
    â”‚
 42 â”‚     new_dop = Core.clamp(cell.dopamine + deltas.dopamine, 0.0, 2.0)
    â”‚                    ~
    â”‚
    â””â”€ lib/withdrawl.ex:42:20: BrainCell.Withdrawal.apply_withdrawal_effect/2

    warning: ElixirAiCore.Core.infer/2 is undefined (module ElixirAiCore.Core is not available or is yet to be defined)
    â”‚
 35 â”‚     output = Core.infer(state.model, input)
    â”‚                   ~
    â”‚
    â””â”€ lib/elixir_ai_core/model_server.ex:35:19: ElixirAiCore.ModelServer.handle_call/3

    warning: variable "type" is unused (if the variable is not meant to be used, prefix it with an underscore)
    â”‚
 17 â”‚   def ensure_started(%{id: id, type: type} = args) do
    â”‚                                      ~~~~
    â”‚
    â””â”€ lib/elixir_ai_core/supervisor.ex:17:38: ElixirAiCore.Supervisor.ensure_started/1

    warning: ElixirAiCore.Tokenizer.tokenize/1 is undefined (module ElixirAiCore.Tokenizer is not available or is yet to be defined)
    â”‚
  6 â”‚     |> ElixirAiCore.Tokenizer.tokenize()
    â”‚                               ~
    â”‚
    â””â”€ lib/elixir_ai_core/phrase_classifier.ex:6:31: ElixirAiCore.PhraseClassifier.classify/1

    warning: ElixirAiCore.Schemas.BrainCell.Schema.build_id/2 is undefined (module ElixirAiCore.Schemas.BrainCell.Schema is not available or is yet to be defined)
    â”‚
 38 â”‚         id = BrainCell.Schema.build_id(word, pos)
    â”‚                               ~
    â”‚
    â””â”€ lib/brain.ex:38:31: Brain.maybe_fire_cells/1

    warning: Brain.get_cell/1 is undefined or private. Did you mean:

          * get/1

    â”‚
 40 â”‚         case Brain.get_cell(id) do
    â”‚                    ~
    â”‚
    â””â”€ lib/brain.ex:40:20: Brain.maybe_fire_cells/1

    warning: Brain.fire_cell/1 is undefined or private
    â”‚
 42 â”‚             Brain.fire_cell(id)
    â”‚                   ~
    â”‚
    â””â”€ lib/brain.ex:42:19: Brain.maybe_fire_cells/1

    warning: Brain.fire_cell/1 is undefined or private
    â”‚
 46 â”‚               Brain.fire_cell(new_cell.id)
    â”‚                     ~
    â”‚
    â””â”€ lib/brain.ex:46:21: Brain.maybe_fire_cells/1

    warning: Brain.enrich_and_start/2 is undefined or private
    â”‚
 45 â”‚             with {:ok, new_cell} <- Brain.enrich_and_start(word, pos) do
    â”‚                                           ~
    â”‚
    â””â”€ lib/brain.ex:45:43: Brain.maybe_fire_cells/1

    warning: ElixirAiCore.Schemas.BrainCell.__schema__/1 is undefined (module ElixirAiCore.Schemas.BrainCell is not available or is yet to be defined)
    â”‚
 60 â”‚         persisted = DB.all(from(b in BrainCell, where: b.word == ^word))
    â”‚         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    â”‚
    â””â”€ lib/brain.ex:60: Brain.handle_call/3

    warning: POSTagger.tag/1 is undefined or private. Did you mean:

          * tag_word/1

    â”‚
 33 â”‚     tagged = POSTagger.tag(tokens)
    â”‚                        ~
    â”‚
    â””â”€ lib/core.ex:33:24: Core.interpret/1

     warning: Brain.put/1 is undefined or private
     â”‚
 108 â”‚                 Brain.put(cell)
     â”‚                       ~
     â”‚
     â””â”€ lib/core.ex:108:23: Core.memorize/1

    warning: Brain.known_word?/1 is undefined or private
    â”‚
  7 â”‚     |> Enum.filter(fn word -> not Brain.known_word?(word) end)
    â”‚                                         ~
    â”‚
    â””â”€ lib/lexicon_expander.ex:7:41: LexiconExpander.expand_from_entry/1

    warning: Brain.known_word?/1 is undefined or private
    â”‚
 17 â”‚     |> Enum.filter(fn w -> not Brain.known_word?(w) end)
    â”‚                                      ~
    â”‚
    â””â”€ lib/lexicon_expander.ex:17:38: LexiconExpander.expand_with_limit/2

    warning: Brain.enrich_word/1 is undefined or private
    â”‚
  8 â”‚     |> Enum.each(fn word -> Brain.enrich_word(word) end)
    â”‚                                   ~
    â”‚
    â””â”€ lib/lexicon_expander.ex:8:35: LexiconExpander.expand_from_entry/1

    warning: Brain.enrich_word/1 is undefined or private
    â”‚
 20 â”‚   Enum.each(new_words, &Brain.enrich_word/1)
    â”‚                               ~
    â”‚
    â””â”€ lib/lexicon_expander.ex:20:31: LexiconExpander.expand_with_limit/2

    warning: Core.lookup_input/1 is undefined or private
    â”‚
 15 â”‚     case Core.lookup_input(word) do
    â”‚               ~
    â”‚
    â””â”€ lib/elixir_ai_core/pos_tagger.ex:15:15: POSTagger.tag_word/1

ðŸ§  AI Brain Console started. Type anything to begin.
> â†³ errors were found at the given arguments:

  * 2nd argument: not a key that exists in the table

[
  {:ets, :lookup_element, [Ecto.Repo.Registry, #PID<0.264.0>, 4],
   [error_info: %{cause: :badkey, module: :erl_stdlib_errors}]},
  {Ecto.Repo.Registry, :lookup, 1,
   [file: ~c"lib/ecto/repo/registry.ex", line: 27]},
  {Ecto.Repo.Supervisor, :tuplet, 2,
   [file: ~c"lib/ecto/repo/supervisor.ex", line: 176]},
  {Core.DB, :all, 2, [file: ~c"lib/core/db.ex", line: 2]},
  {Tokenizer, :resolve_word, 1,
   [file: ~c"lib/elixir_ai_core/tokenizer.ex", line: 49]},
  {Enum, :"-map/2-lists^map/1-1-", 2, [file: ~c"lib/enum.ex", line: 1714]},
  {Console, :handle_input, 1, [file: ~c"lib/console.ex", line: 97]},
  {Console, :handle_cast, 2, [file: ~c"lib/console.ex", line: 46]}
]
> Running ExUnit with seed: 464098, max_cases: 1


ElixirAiCore.TokenizerTest [test/elixir_ai_core/tokenizer_test.exs]
  * test word_to_id is deterministic [L#5]  * test word_to_id is deterministic (3.9ms) [L#5]

  1) test word_to_id is deterministic (ElixirAiCore.TokenizerTest)
     test/elixir_ai_core/tokenizer_test.exs:5
     ** (UndefinedFunctionError) function ElixirAiCore.Tokenizer.word_to_id/1 is undefined (module ElixirAiCore.Tokenizer is not available)
     code: assert Tokenizer.word_to_id("abc") == Tokenizer.word_to_id("abc")
     stacktrace:
       ElixirAiCore.Tokenizer.word_to_id("abc")
       test/elixir_ai_core/tokenizer_test.exs:6: (test)

  * test different words produce different ids [L#9]  * test different words produce different ids (2.4ms) [L#9]

  2) test different words produce different ids (ElixirAiCore.TokenizerTest)
     test/elixir_ai_core/tokenizer_test.exs:9
     ** (UndefinedFunctionError) function ElixirAiCore.Tokenizer.word_to_id/1 is undefined (module ElixirAiCore.Tokenizer is not available)
     code: refute Tokenizer.word_to_id("abc") == Tokenizer.word_to_id("bac")
     stacktrace:
       ElixirAiCore.Tokenizer.word_to_id("abc")
       test/elixir_ai_core/tokenizer_test.exs:10: (test)

  * test embed returns a float between 0 and 1 [L#13]  * test embed returns a float between 0 and 1 (3.8ms) [L#13]
    warning: ElixirAiCore.Tokenizer.word_to_id/1 is undefined (module ElixirAiCore.Tokenizer is not available or is yet to be defined)
    â”‚
  6 â”‚     assert Tokenizer.word_to_id("abc") == Tokenizer.word_to_id("abc")
    â”‚                      ~
    â”‚
    â””â”€ test/elixir_ai_core/tokenizer_test.exs:6:22: ElixirAiCore.TokenizerTest."test word_to_id is deterministic"/1
    â””â”€ test/elixir_ai_core/tokenizer_test.exs:6:53: ElixirAiCore.TokenizerTest."test word_to_id is deterministic"/1

    warning: ElixirAiCore.Tokenizer.embed/1 is undefined (module ElixirAiCore.Tokenizer is not available or is yet to be defined)
    â”‚
 14 â”‚     embedded = Tokenizer.embed("test")
    â”‚                          ~
    â”‚
    â””â”€ test/elixir_ai_core/tokenizer_test.exs:14:26: ElixirAiCore.TokenizerTest."test embed returns a float between 0 and 1"/1


  3) test embed returns a float between 0 and 1 (ElixirAiCore.TokenizerTest)
     test/elixir_ai_core/tokenizer_test.exs:13
     ** (UndefinedFunctionError) function ElixirAiCore.Tokenizer.embed/1 is undefined (module ElixirAiCore.Tokenizer is not available)
     code: embedded = Tokenizer.embed("test")
     stacktrace:
       ElixirAiCore.Tokenizer.embed("test")
       test/elixir_ai_core/tokenizer_test.exs:14: (test)


Finished in 0.1 seconds (0.1s async, 0.00s sync)
3 tests, 3 failures
